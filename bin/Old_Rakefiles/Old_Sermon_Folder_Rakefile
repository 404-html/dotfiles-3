require 'fileutils'
require 'chronic'
require 'date'


MDFILES = FileList["*_sermon.md"]
ARCHIVE = FileList["*_sermon.md", "*_slides.md"]
OLD_PDFS = MDFILES.pathmap("#{Dir.home}/Drive/Worship_Arts_Team/Sermons/%n.pdf")
PDFS = MDFILES.pathmap("#{Dir.home}/Drive/Worship_Arts_Team/Sermons/%n.pdf")
EPUBS = MDFILES.pathmap("#{Dir.home}/Next/Preaching/%n.epub")
LIST_FILES = MDFILES.pathmap("%f")
# JEKYLL = MDFILES.pathmap("#{Dir.home}/worship-planning/_posts/%n.md")

PDFS.zip(MDFILES).each do |target, source|
	file target => [source] do
		sh "pandoc #{source} -o #{target} --template sermon_template.tex"
	end
end

EPUBS.zip(MDFILES).each do |target, source|
	file target => [source] do
		sh "pandoc #{source} -o #{target} --epub-stylesheet=#{Dir.home}/Next/Pandoc/Pandoc_Sermon/epub.css --template sermon_epub.html"
	end
end

# JEKYLL.zip(MDFILES).each do |target, source|
# 	file target => [source] do
# 		date = source[0...10]
# 		cp source, target[0...-10] + "-sermon.md"
# 		# puts target[0...-10] + "-sermon.md"
# 	end
# end

desc "Generate PDF files for Sermon Folder"
task :pdf => PDFS

desc "Generate EPUB files for Preaching Folder"
task :epub => EPUBS

desc "Generate and publish master git-hub"
task :publish do
    system "git add . --all"
    system "git add -u"
    message = "Site updated at #{Time.now.utc}"
    system "git commit -m #{message.inspect}"
    system "git push"
  end

desc "Archives Old Files into Subfolder"
task :store => [:delete] do
	ARCHIVE.each do |target|
	d = Chronic.parse(target[0...10]).to_date
	t = Time.now.to_date
	FileUtils::mkdir_p d.year.to_s
	  if d < t 
		FileUtils.mv "#{target}", "#{d.year.to_s}/#{target}"
		puts "#{target} moved to archive folder"
	  end
    end
end

desc "delete old sermon files and planning files"
task :delete do
	Dir.glob(Dir.home + '/Drive/Worship_Arts_Team/Sermons/*.pdf') do |file|
		name = File.basename(file, ".pdf")[0...10]
		date = Chronic.parse(name).to_date
		today = Time.now.to_date
		FileUtils::mkdir_p date.year.to_s
			if date < today
				FileUtils.remove "#{file}"
			end
	end
end

desc "Delete old epub files"
task :delete_epub do
	Dir.glob(Dir.home + '/Next/Preaching/*.epub') do |file|
		name = File.basename(file, ".epub")[0...10]
		date = Chronic.parse(name).to_date
		today = Time.now.to_date
		FileUtils::mkdir_p date.year.to_s
			if date < today
				FileUtils.remove "#{file}"
			end
	end
end

desc "Delete old mobi files"
task :delete_mobi do
	Dir.glob(Dir.home + '/Next/Preaching/*.mobi') do |file|
		name = File.basename(file, ".mobi")[0...10]
		date = Chronic.parse(name).to_date
		today = Time.now.to_date
		FileUtils::mkdir_p date.year.to_s
			if date < today
				FileUtils.remove "#{file}"
			end
	end
end


desc "make kindle file for next Sunday"
task :kindle do
	Dir.glob(Dir.home + '/Next/Preaching/*.epub') do |file|
		name = File.basename(file, ".epub")[0...10]
		date = Chronic.parse(name).to_date
		sunday = Chronic.parse('sunday').to_date
		directory = File.dirname(file)
		basename = File.basename(file, ".epub")
		if date == sunday
			system "kindlegen #{file}"
			system "sendKindle #{directory}/#{basename}.mobi"
		end		
	end
end

desc "make sermon planning sheet for Nicole"
task :sermonplan do
	system "python3 /Users/wadeallen/bin/update_sermons"
	system "cd /Users/wadeallen/Next/Sermon_Planning_LaTeX/ && pdflatex planning.tex"
	FileUtils.mv "/Users/wadeallen/Next/Sermon_Planning_LaTeX/planning.pdf", "/Users/wadeallen/Drive/Worship_Arts_Team/Plans/planning.pdf"
end

desc "update Web site with upcoming sermons"
task :updatesite do
	system "python3 /Users/wadeallen/bin/update_sermons_site"
end

# desc "Copy Sermon Files to Jekyll Website"
# task :copy_site => JEKYLL


task :default => [:pdf, :epub, :publish, :delete, :store, :delete_epub, :delete_mobi, :sermonplan, :updatesite]
